<?php

namespace App;

use App\Services\Telephony\TelephonyFactory;
use Illuminate\Database\Eloquent\Model;

use Kyslik\LaravelFilterable\Filterable;
use Kyslik\ColumnSortable\Sortable;

/**
 * App\Customer
 *
 * @property int $id
 * @property string $first_name
 * @property string|null $last_name
 * @property string $full_name
 * @property string|null $phone
 * @property string|null $email
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Order[] $orders
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Task[] $tasks
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Customer filter(\Kyslik\LaravelFilterable\FilterContract $filters)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Customer sortable($defaultParameters = null)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Customer whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Customer whereEmail($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Customer whereFirstName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Customer whereFullName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Customer whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Customer whereLastName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Customer wherePhone($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Customer whereUpdatedAt($value)
 * @mixin \Eloquent
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Customer newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Customer newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Customer query()
 */
class Customer extends Model
{
    use Filterable, Sortable;
    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'first_name',
        'last_name',
        'full_name',
        'phone',
        'email',
    ];
    public $sortable = [
        'id'
    ];

    /**
     * Get customer's Orders
     *
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function orders()
    {
        return $this->hasMany('App\Order');
    }

    /**
     * Get customer's Tasks
     *
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function tasks()
    {
        return $this->hasMany('App\Task');
    }

    /**
     * @param Customer $customer
     * @return string
     */
    public static function getCustomerName(Customer $customer)
    {
        return $customer->first_name
            .(is_null($customer->last_name) ? '' : ' '.$customer->last_name);
    }

    /**
     * @return string
     */
    public function getName()
    {
        return self::getCustomerName($this);
    }

    /**
     * @return \App\Call[]|\Illuminate\Database\Eloquent\Collection
     */
    public function calls()
    {
        if(strlen($this->phone) - 10 < 0){
            return collect();
        }

        $calls = Call::whereIn('id', CallEvent::where('phone','LIKE',
            '%'.substr($this->phone, strlen($this->phone) - 10).'%')->pluck('call_id'))->get()->sortBy('id', SORT_REGULAR,
            true)
        ->map(function (Call $call){
            $telephony = (new TelephonyFactory())->getTelephonyFactory($call->telephony_name);
            return $telephony->call()::find($call->id);
        });

        return $calls;
    }

    public function save(array $options = [])
    {
        $this->full_name = $this->first_name
            .(is_null($this->last_name) ? '' : ' '.$this->last_name)
            .(is_null($this->phone) ? '' : ' ('.$this->phone.')')
            .(is_null($this->email) ? '' : ' <'.$this->email.'>');

        return parent::save($options); // TODO: Change the autogenerated stub
    }
}
